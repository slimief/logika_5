#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string.h>
#include <locale.h>

const int G = 7;  // Размер графа
int M[G][G];      // Матрица смежности
// Функция для создания и вывода матрицы инцидентности
void createIncidenceMatrix(int matrix[][G]) {
    // Подсчёт количества рёбер
    int edgeCount = 0;
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            if (matrix[i][j] == 1) {
                edgeCount++;
            }
        }
    }
    // Динамическое выделение памяти для матрицы инцидентности
    int** incidenceMatrix = (int**)malloc(G * sizeof(int*));
    for (int i = 0; i < G; i++) {
        incidenceMatrix[i] = (int*)malloc(edgeCount * sizeof(int));
    }
    // Инициализация матрицы инцидентности
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < edgeCount; j++) {
            incidenceMatrix[i][j] = 0;  // Изначально все значения 0
        }
    }
    // Заполнение матрицы инцидентности
    int edgeIndex = 0;
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            if (matrix[i][j] == 1) {
                incidenceMatrix[i][edgeIndex] = 1;  // Вершина i инцидентна ребру
                incidenceMatrix[j][edgeIndex] = 1;  // Вершина j инцидентна ребру
                edgeIndex++;  // Переход к следующему ребру
            }
        }
    }
    // Вывод матрицы инцидентности
    printf("Матрица инцидентности:\n");
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < edgeCount; j++) {
            printf("%d ", incidenceMatrix[i][j]);
        }
        printf("\n");
    }
    // Поиск изолированных, концевых и доминирующих вершин
    for (int i = 0; i < G; i++) {
        int edgeCountForVertex = 0;
        for (int j = 0; j < edgeCount; j++) {
            edgeCountForVertex += incidenceMatrix[i][j];
        }
        if (edgeCountForVertex == 0) {
            printf("Вершина %d: Изолированная\n", i);
        }
        else if (edgeCountForVertex == 1) {
            printf("Вершина %d: Концевая\n", i);
        }
        else {
            printf("Вершина %d: Доминирующая\n", i);
        }
    }

    // Освобождение памяти
    for (int i = 0; i < G; i++) {
        free(incidenceMatrix[i]);
    }
    free(incidenceMatrix);
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));
    // Инициализация матрицы смежности
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            if (i == j) {
                M[i][j] = 0;  // Нет петли
            }
            else {
                M[i][j] = 0;  // Изначально нет рёбер
            }
        }
    }
    // Генерация случайных рёбер для неориентированного графа
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            M[i][j] = M[j][i] = rand() % 2;  // Случайное ребро между i и j
        }
    }
    // Вывод матрицы смежности на экран
    printf("Матрица смежности:\n");
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            printf("%d ", M[i][j]);
        }
        printf("\n");
    }
    // Создание и вывод матрицы инцидентности
    createIncidenceMatrix(M);
    return 0;
}
